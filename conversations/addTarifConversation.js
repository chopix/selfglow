import { InlineKeyboard } from 'grammy'
import mainMenuFunction from './../functions/mainMenuFunction.js'
import { Tarif } from '../models/Tarif.js'
import { Resource } from '../models/Resource.js'

export const addTarifConversation = async (conversation, ctx) => {
	try {
		const inline = new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
		await ctx.reply(
			'<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞',
			{
				reply_markup: inline,
			}
		)
		const name = await conversation.waitFor(['message:text', 'callback_query'])
		if (
			name.update.callback_query &&
			name.update.callback_query.data &&
			name.update.callback_query.data === 'cancel'
		) {
			return mainMenuFunction(ctx)
		}
		const currencyInline = new InlineKeyboard()
			.text('üá∑üá∫ RUB', 'üá∑üá∫ RUB')
			.text('üíµ USD', 'üíµ USD')
			.text('üí∂ EUR', 'üí∂ EUR')
			.text('üá∞üáø KZT', 'üá∞üáø KZT')
			.row()
			.text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
		await ctx.reply(
			`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ - ${name.message.text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞, –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º`,
			{ reply_markup: currencyInline }
		)
		const currency = await conversation.waitForCallbackQuery(
			['üá∑üá∫ RUB', 'üíµ USD', 'üí∂ EUR', 'üá∞üáø KZT', 'cancel'],
			{
				otherwise: async ctx => {
					await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!', {
						reply_markup: currencyInline,
					})
				},
			}
		)
		if (currency.match === 'cancel') {
			return mainMenuFunction(ctx)
		}
		await ctx.reply(
			`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ - ${name.message.text}\n–í–∞–ª—é—Ç–∞: ${currency.match}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ü–µ–Ω—É –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞(–æ—Ç 1 –µ–¥.):`,
			{ reply_markup: inline }
		)
		const price = await conversation.form.number()
		const daysInline = new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
		await ctx.reply(
			`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ - ${name.message.text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ –≤ –¥–Ω—è—Ö üëá`,
			{ reply_markup: daysInline }
		)
		let days = await conversation.waitFor(['message:text', 'callback_query'])
		if (
			days.update.callback_query &&
			days.update.callback_query.data &&
			days.update.callback_query.data === 'cancel'
		) {
			return mainMenuFunction(ctx)
		}
		if (!/^\d+$/.test(days.message.text)) {
			do {
				await ctx.reply('–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–ª-–≤–æ –≤ —Ü–∏—Ñ—Ä–∞—Ö.')
				days = await conversation.waitFor(['message:text', 'callback_query'])
			} while (!/^\d+$/.test(days.message.text))
		}
		const nextInline = new InlineKeyboard()
			.text('‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤', 'next')
			.row()
			.text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
		await ctx.reply(
			`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ - ${name.message.text}\n–í–∞–ª—é—Ç–∞: ${currency.match}\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${days.message.text} –¥–Ω–µ–π\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –∫ —Ç–∞—Ä–∏—Ñ—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`,
			{
				reply_markup: nextInline,
			}
		)
		const next = await conversation.waitForCallbackQuery(['next', 'cancel'], {
			otherwise: async ctx =>
				await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!', {
					reply_markup: nextInline,
				}),
		})
		if (next.match === 'cancel') {
			return mainMenuFunction(ctx)
		}
		const resources = await Resource.findAll()

		const buttons = resources.map(resource => ({
			text: resource.resourceName,
			callback_data: `tarifResource ${resource.id}`,
		}))

		const resourceInline = new InlineKeyboard()

		buttons.forEach(button => {
			resourceInline.text(button.text, button.callback_data).row() // –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
		})

		resourceInline.text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')

		await ctx.reply(
			`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ - ${name.message.text}
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${days.message.text} –¥–Ω–µ–π
–í–∞–ª—é—Ç–∞: ${currency.match}
–¶–µ–Ω–∞: ${price}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ üëá`,
			{
				reply_markup: resourceInline,
			}
		)

		const resource = await conversation.waitFor('callback_query')
		console.log(resource.update.callback_query.data)
		if (resource.update.callback_query.data === 'cancel') {
			return mainMenuFunction(ctx)
		} else if (resource.update.callback_query.data.includes('tarifResource')) {
			const inline = new InlineKeyboard()
				.text('Sk Academy', '1')
				.text('Sonya Konova', '2')
				.row()
				.text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
			await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É', {
				reply_markup: inline,
			})
			const payment = await conversation.waitForCallbackQuery(
				['1', '2', 'cancel'],
				{
					otherwise: async ctx =>
						await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!', {
							reply_markup: nextInline,
						}),
				}
			)
			if (payment.match === 'cancel') {
				return mainMenuFunction(ctx)
			}
			const allTarifs = await Tarif.findAll()
			const resourceId = resource.update.callback_query.data.split(' ')[1]
			const tarif = await Tarif.create({
				name: name.message.text,
				currency: currency.match,
				price: price,
				time: days.message.text * 24 * 60,
				priority: allTarifs.length + 1,
				resourceId: resourceId,
				payment: payment.match,
			})
			await ctx.reply('–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
			return mainMenuFunction(ctx)
		}
	} catch (e) {
		console.log(e)
	}
}
