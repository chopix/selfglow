import { InlineKeyboard } from 'grammy'
import 'dotenv/config'
import mainMenuFunction from '../functions/mainMenuFunction.js'

function getMaxFileSizeObject(array) {
	if (!Array.isArray(array) || array.length === 0) {
		return null // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
	}

	let maxFileSizeObject = array.reduce((max, current) => {
		return max.file_size > current.file_size ? max : current
	})

	return maxFileSizeObject
}

export const askUserConversation = async (conversation, ctx) => {
	try {
		const inline = new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')
		await ctx.reply(
			'–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∏–ª–∏ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –º–µ–¥–∏–∞–≤–ª–æ–∂–µ–Ω–∏–µ–º:',
			{
				reply_markup: inline,
			}
		)
		const question = await conversation.waitFor([
			'message:text',
			'callback_query',
			'message:media',
			'message:animation',
		])
		console.log(question.message.photo)
		if (
			question.update.callback_query &&
			question.update.callback_query.data &&
			question.update.callback_query.data === 'cancel'
		) {
			return mainMenuFunction(ctx)
		} else {
			const inlineAnswer = new InlineKeyboard().text(
				'üìù –û—Ç–≤–µ—Ç–∏—Ç—å',
				`answerToUserAsk ${question.from.id}`
			)
			await ctx.reply('–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
			let media = 0
			let fileId
			if (question.message.photo) {
				fileId = getMaxFileSizeObject(question.message.photo).file_id
				media = 1
			} else if (question.message.video) {
				fileId = getMaxFileSizeObject(question.message.video).file_id
				media = 2
			} else if (question.message.animation) {
				fileId = getMaxFileSizeObject(question.message.video).file_id
				media = 3
			}
			if (question.chat.username) {
				await ctx.api.sendMessage(
					process.env.ADMIN_TG_ID,
					`<b>–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @${question.chat.username}</b>\n\n${question.message.text}`,
					{
						reply_markup: inlineAnswer,
					}
				)
			} else {
				await ctx.api.sendMessage(
					process.env.ADMIN_TG_ID,
					`<b>–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–∞–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä—ã—Ç—ã–π)</b>\n\n${question.message.text}`,
					{
						reply_markup: inlineAnswer,
					}
				)
			}
		}
	} catch (e) {
		console.log(e)
	}
}
