import { Composer, InlineKeyboard } from 'grammy'
import { Promocode } from '../models/Promocode.js'
import { User } from '../models/User.js'
import { Pagination } from './../libs/pagination.js'
import { sendAdminMenu } from '../functions/sendAdminMenu.js'

const composer = new Composer()

export async function sendPromoMenu(ctx) {
	try {
		const inline = new InlineKeyboard()
			.text('–û–±—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã', 'promo')
			.row()
			.text('–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ä–∞—Å—Å—ã–ª–æ–∫', 'promoListings')
			.row()
			.text('üîô –ù–∞–∑–∞–¥', 'backPromo')
		await ctx.reply(
			`<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π`,
			{ reply_markup: inline }
		)
	} catch (e) {
		console.log(e)
	}
}

composer.callbackQuery('settingsPromo', async ctx => {
	await sendPromoMenu(ctx)
})

composer.callbackQuery('promo', async ctx => {
	try {
		const promos = await Promocode.findAll()

		const buttons = promos.map(promo => ({
			text: `–ü—Ä–æ–º–æ–∫–æ–¥ ${promo.name}`,
			callback_data: `selectPromo ${promo.id}`,
		}))

		const inlineKeyboard = new InlineKeyboard()

		buttons.forEach(button => {
			inlineKeyboard.text(button.text, button.callback_data).row() // –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
		})

		inlineKeyboard
			.text('‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'createPromo')
			.row()
			.text('üîô –ù–∞–∑–∞–¥', 'backPromoMain')
		await ctx.reply(
			`<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π`,
			{ reply_markup: inlineKeyboard }
		)
	} catch (e) {
		console.log(e)
	}
})

composer.callbackQuery('createPromo', async ctx => {
	await ctx.conversation.enter('createPromoConversation')
})

composer.callbackQuery(/selectPromo/, async ctx => {
	const promoId = ctx.callbackQuery.data.split(' ')[1]
	ctx.session.selectedPromoId = promoId
	const promo = await Promocode.findByPk(promoId)
	const promoActivatedPeople = JSON.parse(promo.activatedUsers)
	const inline = new InlineKeyboard()
		.text('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π', 'editPromoActivationCount')
		.row()
		.text(
			'‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞',
			'editPromoActivationCountPerUser'
		)
		.row()
		.text('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞', 'editPromoDuration')
		.row()
		.text('–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π', 'promoActivationList')
		.row()
		.text('–£–¥–∞–ª–∏—Ç—å', 'deletePromo')
		.row()
		.text('–ù–∞–∑–∞–¥', 'backEditingPromo')
	await ctx.reply(
		`–ù–∞–∑–≤–∞–Ω–∏–µ: –ü—Ä–æ–º–æ–∫–æ–¥ ${promo.name}
–ü—Ä–æ–º–æ–∫–æ–¥: ${promo.name}
–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏: ${promo.percent}%
–ê–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoActivatedPeople.length} —Ä–∞–∑
–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${promo.activationCount}.
–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º: ${promo.activationCountPerUser}.
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${
			promo.duration === 0 ? '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω' : `${promo.duration} –¥–Ω–µ–π`
		}.`,
		{
			reply_markup: inline,
		}
	)
})

composer.callbackQuery('editPromoActivationCount', async ctx => {
	if (ctx.session.selectedPromoId)
		await ctx.conversation.enter('editPromoActivationCountConversation')
})

composer.callbackQuery('editPromoActivationCountPerUser', async ctx => {
	if (ctx.session.selectedPromoId)
		await ctx.conversation.enter('editPromoActivationCountPerUserConversation')
})
composer.callbackQuery('editPromoDuration', async ctx => {
	if (ctx.session.selectedPromoId)
		await ctx.conversation.enter('editPromoDurationConversation')
})

composer.callbackQuery('promoActivationList', async ctx => {
	if (ctx.session.selectedPromoId) {
		const promoId = ctx.session.selectedPromoId
		const promo = await Promocode.findByPk(promoId)
		let data = []
		const promoActivatedPeople = JSON.parse(promo.activatedUsers)
		if (promoActivatedPeople.length === 0) await ctx.reply(`–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.`)
		else {
			for (const e of promoActivatedPeople) {
				const user = await User.findByPk(e)
				data.push(`@${user.username}, –¢–µ–ª–µ–≥—Ä–∞–º ID: ${user.tgId}`)
			}
			let pagination = new Pagination({ data })
			let text = await pagination.text()
			let keyboard = await pagination.keyboard()
			await ctx.reply(text, keyboard)

			pagination.handleActions(composer)
		}
	}
})

composer.callbackQuery('deletePromo', async ctx => {
	if (ctx.session.selectedPromoId) {
		const promoId = ctx.session.selectedPromoId
		const promo = await Promocode.findByPk(promoId)
		await promo.destroy()
		await ctx.reply(`–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`)
		ctx.session.selectedPromoId = null
	}
})

composer.callbackQuery('backPromo', async ctx => await sendAdminMenu(ctx))
composer.callbackQuery('backPromoMain', async ctx => await sendPromoMenu(ctx))
composer.callbackQuery(
	'backEditingPromo',
	async ctx => await sendPromoMenu(ctx)
)

export default composer
